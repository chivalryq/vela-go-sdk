/*
Generated by cue.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: no version
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package helm

import (
	"encoding/json"

	"github.com/chivalryq/vela-go-sdk/pkg/apis/utils"
)

// checks if the Helmrepository type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Helmrepository{}

// Helmrepository struct for Helmrepository
type Helmrepository struct {
	// The OIDC provider used for authentication purposes.The generic provider can be used for public repositories or when static credentials are used for authentication, either with spec.secretRef or spec.serviceAccountName
	Provider *string `json:"provider,omitempty"`
}

// NewHelmrepositoryWith instantiates a new Helmrepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmrepositoryWith() *Helmrepository {
	this := Helmrepository{}
	var provider string = "generic"
	this.Provider = &provider
	return &this
}

// NewHelmrepository instantiates a new Helmrepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmrepository() *Helmrepository {
	this := Helmrepository{}
	var provider string = "generic"
	this.Provider = &provider
	return &this
}

// NewHelmrepositorys converts a list Helmrepository pointers to objects.
// This is helpful when the SetHelmrepository requires a list of objects
func NewHelmrepositorys(ps ...*Helmrepository) []Helmrepository {
	objs := []Helmrepository{}
	for _, p := range ps {
		objs = append(objs, *p)
	}
	return objs
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Helmrepository) GetProvider() string {
	if o == nil || utils.IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Helmrepository) GetProviderOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Helmrepository) HasProvider() bool {
	if o != nil && !utils.IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the provider field.
// Provider:  The OIDC provider used for authentication purposes.The generic provider can be used for public repositories or when static credentials are used for authentication, either with spec.secretRef or spec.serviceAccountName
func (o *Helmrepository) SetProvider(v string) *Helmrepository {
	o.Provider = &v
	return o
}

func (o Helmrepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Helmrepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	return toSerialize, nil
}

type NullableHelmrepository struct {
	value *Helmrepository
	isSet bool
}

func (v NullableHelmrepository) Get() *Helmrepository {
	return v.value
}

func (v *NullableHelmrepository) Set(val *Helmrepository) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmrepository) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmrepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmrepository(val *Helmrepository) *NullableHelmrepository {
	return &NullableHelmrepository{value: val, isSet: true}
}

func (v NullableHelmrepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmrepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
